<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程的第一步 on Engine GO</title>
    <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/</link>
    <description>Recent content in 编程的第一步 on Engine GO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Jan 2019 00:21:14 +0800</lastBuildDate>
    
	<atom:link href="https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python 是如何运行的（未完成）</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/python%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E7%9A%84/</link>
      <pubDate>Wed, 16 Jan 2019 00:21:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/python%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E7%9A%84/</guid>
      <description>Python 是我以及许多人第一门深入学习的编程语言，在我初学 Python 的时候，并不需要了解它的运作原理，而随着我了解得越多，我想知道的也变得越多。我阅读了不少 Python 的源代码，也阅读了很多相关的文章，这篇文章会略过代码，从高层次的角度给各位一些指引。
世界上最好的编程语言是什么，取决于你用来做什么，不过正确的答案往往是问你这个问题的人最喜欢的语言。如果你学习编程是为了乐趣的话，那么 Python 会给你很多乐趣。从服务器后端，机器学习，数据分析都有它重要的位置，而且可读性非常高。如果你是为了找份工作的话，学习什么语言就根据你所在地的招聘信息来定了，一般来说 Golang, Java, C++ 这几个都不错。Guido van Rossum 在 1989 年趁着家人去旅游写下的第一个版本是用 C 语言实现的（感谢那次旅游），至今最流行的实现也是这个版本，称为 CPython。
不过无可否认的是，Python 正慢慢变成全球最受欢迎的语言，没有之一。
那么计算机是如何理解并且运行 Python 的源代码的呢？分为编译与解释两个过程，首先，计算机按照顺序从上到下一条条执行指令的，计算机的优点是它能迅速地完成一些重复的工作，例如 1秒钟 进行百万次的加减，赋值。由于计算机不能像人类一样理解过于抽象的内容，例如函数，类（即使可以，也会非常耗时），所以需要把复杂，抽象的源代码简化为机器能够理解，能够快速运行的代码，这个过程就是 Python 的编译过程。
tokenizer 过程 编译器首先要理解源代码，首先要分析每个字符串的含义，例如 def 和 class 这类关键字的含义与普通的字符串就不一样。
举一个例子 hello.py
def say_hello(): print(&amp;quot;Hello, World!&amp;quot;)  下面我们使用 Python 自带的 tokenize 模块分析 hello.py，我们可以看到 tokenize 模块把 &amp;ldquo;Hello, World&amp;rdquo; 当成 STRING 类型，而 def, say_hello 等当成了 NAME 类型。
$ python -m tokenize hello.py 0,0-0,0: ENCODING &#39;utf-8&#39; 1,0-1,3: NAME &#39;def&#39; 1,4-1,13: NAME &#39;say_hello&#39; 1,13-1,14: OP &#39;(&#39; 1,14-1,15: OP &#39;)&#39; 1,15-1,16: OP &#39;:&#39; 1,16-1,17: NEWLINE &#39;\n&#39; 2,0-2,4: INDENT &#39; &#39; 2,4-2,9: NAME &#39;print&#39; 2,9-2,10: OP &#39;(&#39; 2,10-2,25: STRING &#39;&amp;quot;Hello, World!</description>
    </item>
    
    <item>
      <title>什么是编程（未完成）</title>
      <link>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Fri, 01 Jun 2018 00:10:14 +0800</pubDate>
      
      <guid>https://www.enginego.org/%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/%E4%BB%80%E4%B9%88%E6%98%AF%E7%BC%96%E7%A8%8B/</guid>
      <description>我常常去参加一些编程活动，意外的是，这些活动中我接触到很多想学习计算机的朋友。他们想学习编程，但是常常被计算机不同的范畴弄得头昏脑胀，先学编程语言呢，还是数据结构和算法，先学建网站，写 APP，还是大数据，人工智能？这里我推荐 Crash Course 计算机科学的视频，它从原理介绍了编程的起源以什么是编程，非常有趣和浅显易懂，适合完全零基础甚至初中生去看。
 计算机科学速成课 (YouTube) 计算机科学速成课（中文字幕）  在电子计算机还没有被发明的时候。计算机指的并不是我们现在常识中的电脑硬件，而是使用计算器计算的人（大多是女性，我猜因为女性比较细心，容易管理）。她们会被分配一些数据和需要计算的步骤，接着按照步骤耐心地操作计算器，然后写出结果。如果你看过电影《隐藏人物》应该会对一大堆女生拿着计算器埋头计算的场景有印象。不过，你不会把用计算器按下数字得到答案当作在编程，只会把它当成是使用工具的一种方式，但是实际上它与编程并没有太大的区别。举个例子，我们现在需要把一个文本文件的数据转换为Excel表格保存。文本的内容是：
 Shall I compare thee to a summer’s day?
Thou art more lovely and more temperate.
Rough winds do shake the darling buds of May,
 我们想把这些数据转换成Excel文件：
   A1 A2 A3     Shall I compare thee to a summer’s day? Thou art more lovely and more temperate. Rough winds do shake the darling buds of May,    与按计算器不一样的是，这里的数字变成了三行的文本，乘法法则变成了格式转换。得到的结果变成了Excel的文件。不过它们两者都遵循三个原则，接受数据，处理数据，输出数据，要解决这个问题就像按计算器一样简单：</description>
    </item>
    
  </channel>
</rss>